/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var CRL = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,10],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,11],$V8=[1,22],$V9=[5,11,20,57,58,59,60,61,62,63],$Va=[1,28],$Vb=[2,63],$Vc=[20,57,58,59,60,61,62,63],$Vd=[1,36],$Ve=[1,37],$Vf=[11,25],$Vg=[2,19],$Vh=[1,52],$Vi=[1,51],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[5,11,18,20,25,34,35,36,37,38,39,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63],$Vq=[18,25],$Vr=[1,68],$Vs=[1,67],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[11,18,25,34,35,36,37,38,39,42,43,44,45,46,47,48,49],$VG=[11,18,25,34,35],$VH=[11,18,25,34,35,36,37,38],$VI=[11,18,25,34,35,36,37,38,39,42,43,44,45,46,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"mp":3,"body_ak":4,"EOF":5,"body_content":6,"instructions":7,"func_dec":8,"tabs":9,"instructions_sub":10,"CR":11,"var_actions":12,"func_call":13,"var_type":14,"id":15,"(":16,"param_request":17,")":18,":":19,"VOID":20,"MAIN":21,"var_dec":22,"var_assign":23,"var_assign_list":24,",":25,"var_assign_custom":26,"=":27,"expr":28,"arythmetic_expr":29,"op_expr":30,"compare_expr":31,"logical_expr":32,"element":33,"-":34,"+":35,"*":36,"/":37,"%":38,"^":39,"++":40,"--":41,">":42,"<":43,"==":44,"!=":45,"<=":46,">=":47,"&&":48,"||":49,"!":50,"param_send":51,"INT_VAL":52,"CHAR_VAL":53,"DOUBLE_VAL":54,"VAL_COM":55,"BOOL_VAL":56,"INT":57,"CHAR":58,"BOOL":59,"DOUBLE":60,"STRING":61,"TAB":62,"ID":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"CR",16:"(",18:")",19:":",20:"VOID",21:"MAIN",25:",",27:"=",34:"-",35:"+",36:"*",37:"/",38:"%",39:"^",40:"++",41:"--",42:">",43:"<",44:"==",45:"!=",46:"<=",47:">=",48:"&&",49:"||",50:"!",52:"INT_VAL",53:"CHAR_VAL",54:"DOUBLE_VAL",55:"VAL_COM",56:"BOOL_VAL",57:"INT",58:"CHAR",59:"BOOL",60:"DOUBLE",61:"STRING",62:"TAB",63:"ID"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[7,2],[7,1],[7,1],[10,1],[10,1],[8,8],[8,6],[12,2],[12,2],[22,2],[24,3],[24,1],[26,1],[26,1],[23,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[30,2],[30,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[32,3],[32,3],[32,2],[13,4],[13,3],[51,3],[51,1],[17,4],[17,2],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[9,2],[9,1],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 52:
 this.$=$$[$0]; 
break;
case 53: case 55:
 this.$=Number(yytext); 
break;
case 54:
 this.$=yytext.replaceAll("'", ""); 
break;
case 56:
 this.$=yytext.replaceAll("\"", ""); 
break;
case 57:
 this.$=yytext==="true"; 
break;
case 58: case 59: case 60: case 61: case 62: case 63:
 this.$=yytext; 
break;
case 66:
 this.$ =  new AstNode(value = yytext);;
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:$V0,12:12,13:13,14:9,15:21,20:$V1,22:19,23:20,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:6,10:7,11:$V0,12:12,13:13,14:9,15:21,20:$V1,22:19,23:20,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),{10:25,12:12,13:13,14:27,15:21,20:$Va,22:19,23:20,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6,62:[1,26],63:$V8},o($V9,[2,7]),o($V9,[2,8]),{15:29,23:32,24:30,26:31,63:$V8},{21:[1,33],63:$Vb},o($Vc,[2,65]),o($V9,[2,9]),o($V9,[2,10]),{63:[2,58]},{63:[2,59]},{63:[2,60]},{63:[2,61]},{63:[2,62]},{11:[1,34]},{11:[1,35]},{16:$Vd,27:$Ve},o([11,16,18,25,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],[2,66]),{1:[2,1]},o($V9,[2,2]),o($V9,[2,6]),o($Vc,[2,64]),{15:38,23:32,24:30,26:31,63:$V8},{63:$Vb},o($Vf,$Vg,{16:[1,39],27:$Ve}),{11:[2,15],25:[1,40]},o($Vf,[2,17]),o($Vf,[2,18]),{16:[1,41]},o($V9,[2,13]),o($V9,[2,14]),{13:50,15:53,16:$Vh,18:[1,43],28:44,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,51:42,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:60,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},o($Vf,$Vg,{27:$Ve}),{14:62,17:61,20:$Va,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{15:38,23:32,26:63,63:$V8},{18:[1,64]},{18:[1,65],25:[1,66]},o($Vp,[2,47]),o($Vq,[2,49],{34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VF,[2,21]),o($VF,[2,22]),o($VF,[2,23]),o($VF,[2,24]),o($VF,[2,25]),o($VF,[2,26]),{13:50,15:53,16:$Vh,28:81,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:82,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},o($VF,[2,52],{16:$Vd,40:[1,83],41:[1,84]}),{13:50,15:53,16:$Vh,28:85,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},o($VF,[2,53]),o($VF,[2,54]),o($VF,[2,55]),o($VF,[2,56]),o($VF,[2,57]),o($Vf,[2,20],{34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),{18:[1,86],25:[1,87]},{15:88,63:$V8},o($Vf,[2,16]),{19:[1,89]},o($Vp,[2,46]),{13:50,15:53,16:$Vh,28:90,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:91,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:92,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:93,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:94,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:95,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:96,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:97,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:98,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:99,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:100,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:101,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:102,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:103,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},{13:50,15:53,16:$Vh,28:104,29:45,30:46,31:47,32:48,33:49,34:$Vi,50:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,63:$V8},o([11,18,25,34,35,36,37,38,39],[2,27],{42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),{18:[1,105],34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE},o($VF,[2,35]),o($VF,[2,36]),o($VF,[2,45]),{19:[1,106]},{14:107,20:$Va,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},o($Vq,[2,51]),{11:[1,108]},o($Vq,[2,48],{34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VG,[2,28],{36:$Vt,37:$Vu,38:$Vv,39:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VG,[2,29],{36:$Vt,37:$Vu,38:$Vv,39:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VH,[2,30],{39:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VH,[2,31],{39:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VH,[2,32],{39:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VH,[2,33],{39:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VI,[2,37],{48:$VD,49:$VE}),o($VI,[2,38],{48:$VD,49:$VE}),o($VI,[2,39],{48:$VD,49:$VE}),o($VI,[2,40],{48:$VD,49:$VE}),o($VI,[2,41],{48:$VD,49:$VE}),o($VI,[2,42],{48:$VD,49:$VE}),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,34]),{11:[1,109]},{15:110,63:$V8},o($V9,[2,12]),{7:111,9:6,10:7,11:$V0,12:12,13:13,14:27,15:21,20:$Va,22:19,23:20,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6,62:$V7,63:$V8},o($Vq,[2,50]),o($V9,[2,11])],
defaultActions: {14:[2,58],15:[2,59],16:[2,60],17:[2,61],18:[2,62],23:[2,1],28:[2,63]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.pushState('ML_COM'); 
break;
case 1: this.pushState('INITIAL'); 
break;
case 2: ; 
break;
case 3: ; 
break;
case 4: this.pushState('L_COM'); 
break;
case 5: this.pushState('INITIAL'); 
break;
case 6: ; 
break;
case 7: /*ignore*/; 
break;
case 8:return 56;
break;
case 9:return 57;
break;
case 10:return 58;
break;
case 11:return 20;
break;
case 12:return 60;
break;
case 13:return 61;
break;
case 14:return 59;
break;
case 15:return 'IMPORT';
break;
case 16:return 'UNCERTAINTY';
break;
case 17:return 'IF';
break;
case 18:return 'ELSE';
break;
case 19:return 'FOR';
break;
case 20:return 'PRINT';
break;
case 21:return 'RETURN';
break;
case 22:return 'BREAK';
break;
case 23:return 'CONTINUE';
break;
case 24:return 21;
break;
case 25:return 'DRAW_TS';
break;
case 26:return 'DRAW_ATS';
break;
case 27:return 'DRAW_EXP';
break;
case 28:return 35;     // addition
break;
case 29:return 34;     // substraction
break;
case 30:return 36;     // multiplication
break;
case 31:return 37;     // division
break;
case 32:return 38;     // module
break;
case 33:return 39;     // exponent
break;
case 34:return 43;     // lower than
break;
case 35:return 42;     // higher than
break;
case 36:return '~';     // uncertainty operator
break;
case 37:return 44;    // equal
break;
case 38:return 45;    // not equal
break;
case 39:return 46;    // lower or equal than
break;
case 40:return 47;    // higher or equal than
break;
case 41:return 27;     // assignment
break;
case 42:return 40;    // increment
break;
case 43:return 41;    // decrement
break;
case 44:return 48;    // and
break;
case 45:return 49;    // or
break;
case 46:return 50;     // not
break;
case 47:return '|&';    // xor
break;
case 48:return 25;     // comma
break;
case 49:return 19;     // colon
break;
case 50:return 16;     // left parenthesis
break;
case 51:return 18;     // right parenthesis
break;
case 52:return '{';     // left curly bracket
break;
case 53:return '}';     // right curly bracket
break;
case 54:return 54; // decimal: 0.23
break;
case 55:return 52;    // number: 1
break;
case 56:return 53;   // char value: 'a'
break;
case 57:return 55;    // value into comillas: "hi"
break;
case 58:return 63;      // identifier: myId
break;
case 59:return "CLR_FILE";
break;
case 60:return 11;    // new line
break;
case 61:return 62;   // tab
break;
case 62:return 5;   // end of file
break;
case 63:return "INVALID_TKN";  // error, not valid char token
break;
}
},
rules: [/^(?:'")/,/^(?:'")/,/^(?:\n)/,/^(?:.)/,/^(?:!!)/,/^(?:\n)/,/^(?:.)/,/^(?:[ \r]+)/,/^(?:true|false\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:Double\b)/,/^(?:String\b)/,/^(?:Boolean\b)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mostrar\b)/,/^(?:Retorno\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Principal\b)/,/^(?:DibujarTS\b)/,/^(?:DibujarATS\b)/,/^(?:DibujarEXP\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\|&)/,/^(?:,)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:'(.)')/,/^(?:"[^'"'\n\r]*")/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*\.clr\b)/,/^(?:\n)/,/^(?:\t)/,/^(?:$)/,/^(?:.)/],
conditions: {"L_COM":{"rules":[0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true},"ML_COM":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = CRL;
exports.Parser = CRL.Parser;
exports.parse = function () { return CRL.parse.apply(CRL, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}