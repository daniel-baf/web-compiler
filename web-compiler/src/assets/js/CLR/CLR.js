/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var CLR = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[10,25,41,76,77,78,79],$V8=[5,10,25,41,76,77,78,79],$V9=[1,26],$Va=[2,81],$Vb=[1,32],$Vc=[1,33],$Vd=[1,34],$Ve=[5,10,25,41,76,77,78,79,80],$Vf=[1,63],$Vg=[25,32,33,37,39,40,41,44,46,50,51,52,53,76,77,78,79,80,85],$Vh=[1,75],$Vi=[1,81],$Vj=[1,74],$Vk=[1,77],$Vl=[1,78],$Vm=[1,79],$Vn=[1,80],$Vo=[1,82],$Vp=[1,87],$Vq=[1,103],$Vr=[1,102],$Vs=[1,104],$Vt=[1,105],$Vu=[1,106],$Vv=[1,107],$Vw=[1,108],$Vx=[1,109],$Vy=[1,110],$Vz=[1,111],$VA=[1,112],$VB=[1,113],$VC=[1,114],$VD=[1,115],$VE=[10,23,42,48,59,60,61,62,63,64,67,68,69,70,71,72,73,74],$VF=[1,119],$VG=[1,120],$VH=[23,48],$VI=[1,152],$VJ=[10,23,42,48,59,60],$VK=[10,23,42,48,59,60,61,62,63],$VL=[10,23,42,48,59,60,61,62,63,64,67,68,69,70,71,72];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"mp":3,"code_sec":4,"EOF":5,"globals_var_dec":6,"funcs_sec":7,"global_var":8,"var_dec":9,"CR":10,"func_mdl":11,"func_def":12,"func_content":13,"stmt_tbs":14,"tabs":15,"stmt":16,"line":17,"selection":18,"var_type":19,"id":20,"(":21,"param_request":22,")":23,":":24,"VOID":25,"MAIN":26,"var_assign":27,"func_call":28,"show_stmt":29,"draw_stmt":30,"return_stmt":31,"CONTINUE":32,"BREAK":33,"if_stmt":34,"for_stmt":35,"while_stmt":36,"IF":37,"expr":38,"ELSE":39,"FOR":40,"INT":41,";":42,"op_sym":43,"WHILE":44,"=":45,"PRINT":46,"VAL_COM":47,",":48,"parm_list":49,"DRAW_AST":50,"DRAW_TS":51,"DRAW_EXP":52,"RETURN":53,"arythmetic_expr":54,"op_expr":55,"compare_expr":56,"logical_expr":57,"element":58,"-":59,"+":60,"*":61,"/":62,"%":63,"^":64,"++":65,"--":66,">":67,"<":68,"==":69,"!=":70,"<=":71,">=":72,"&&":73,"||":74,"!":75,"CHAR":76,"BOOL":77,"DOUBLE":78,"STRING":79,"TAB":80,"INT_VAL":81,"DOUBLE_VAL":82,"CHAR_VAL":83,"BOOL_VAL":84,"ID":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"CR",21:"(",23:")",24:":",25:"VOID",26:"MAIN",32:"CONTINUE",33:"BREAK",37:"IF",39:"ELSE",40:"FOR",41:"INT",42:";",44:"WHILE",45:"=",46:"PRINT",47:"VAL_COM",48:",",50:"DRAW_AST",51:"DRAW_TS",52:"DRAW_EXP",53:"RETURN",59:"-",60:"+",61:"*",62:"/",63:"%",64:"^",65:"++",66:"--",67:">",68:"<",69:"==",70:"!=",71:"<=",72:">=",73:"&&",74:"||",75:"!",76:"CHAR",77:"BOOL",78:"DOUBLE",79:"STRING",80:"TAB",81:"INT_VAL",82:"DOUBLE_VAL",83:"CHAR_VAL",84:"BOOL_VAL",85:"ID"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[8,2],[7,2],[7,1],[11,3],[11,1],[13,2],[13,1],[14,2],[16,2],[16,2],[12,6],[12,5],[12,5],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[18,1],[18,1],[18,1],[34,5],[34,2],[34,6],[35,10],[36,5],[9,2],[27,3],[29,4],[29,6],[30,4],[30,3],[30,4],[31,2],[31,1],[22,4],[22,2],[49,3],[49,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[54,2],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[55,2],[43,1],[43,1],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[57,3],[57,3],[57,2],[28,4],[28,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[15,2],[15,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        var finalprogram = {errors: errors_clr, ast: this.$};
        clear_data();
        return finalprogram;
    
break;
case 2:
 printk();  let result = $$[$0-1].concat($$[$0]); this.$ = result; 
break;
case 3: case 48: case 49: case 50: case 51: case 52: case 53: case 84:
 this.$=$$[$0]; 
break;
case 4: case 11:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 5:
 this.$ = [$$[$0]]; 
break;
case 6: case 14: case 15:
 this.$=$$[$0-1]; 
break;
case 7:
 if($$[$0]!=null) $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 8:
 this.$=[]; if($$[$0] != null) this.$.push($$[$0]); 
break;
case 9:
 this.$ = new AstNode("function", {left: $$[$0-2], right: $$[$0]}); 
break;
case 10:
 this.$ = null; 
break;
case 12:
 this.$=[$$[$0]]; 
break;
case 13:
 this.$ = new AstNode("statement", {left: $$[$0], tabs: $$[$0-1]}); 
break;
case 16:
 this.$=new AstNode("func", {type: $$[$0-5], name: $$[$0-4], params: $$[$0-2], tabs: 0}); 
break;
case 17:
 this.$=new AstNode("func", {type: $$[$0-4], name: $$[$0-3], params: null, tabs: 0}); 
break;
case 18:
 this.$=new AstNode("main"); 
break;
case 19: case 20: case 21: case 22: case 23: case 24: case 27: case 28: case 29:
 this.$= $$[$0]; 
break;
case 25:
 this.$= new AstNode("continue"); 
break;
case 26:
 this.$= new AstNode("break"); 
break;
case 30:
 this.$= new AstNode("if", {left: $$[$0-2]}); 
break;
case 31:
 this.$= new AstNode("else"); 
break;
case 32:
 this.$= new AstNode("elseif", {left: $$[$0-2]}); 
break;
case 33:

            var vd = new AstNode("var_dec", { left: $$[$0-7], right: $$[$0-6]});
            this.$= new AstNode("for", {left: vd, expr: $$[$0-4], inc: $$[$0-2]}); 
        
break;
case 34:
 this.$= new AstNode("while", {left: $$[$0-2]}); 
break;
case 35:
 this.$=new AstNode("var_dec", {left: $$[$0-1], right: $$[$0]}); 
break;
case 36:
 this.$=new AstNode('=', {left: $$[$0-2], right: $$[$0]}); 
break;
case 37:
 this.$=new AstNode('print', {value: $$[$0-1].replaceAll("\"","")}); 
break;
case 38:
 this.$=new AstNode('print', {value: $$[$0-3].replaceAll("\"",""), params: $$[$0-1]}); 
break;
case 39:
 this.$=new AstNode('draw_ast', {value: $$[$0-1]}); 
break;
case 40:
 this.$=new AstNode('draw_ts'); 
break;
case 41:
 this.$=new AstNode('draw_exp', {value: $$[$0-1]}); 
break;
case 42:
 this.$=new AstNode('return', {value: $$[$0]}); 
break;
case 43:
 this.$=new AstNode('return'); 
break;
case 44:
 $$[$0-3].push(new AstNode("var_dec", {left: $$[$0-1], right: $$[$0]})); this.$=$$[$0-3]; 
break;
case 45:
 this.$ = [new AstNode("var_dec", {left: $$[$0-1], right: $$[$0]})]; 
break;
case 46:
 $$[$0-2].push(new AstNode("param", {left: $$[$0]})); this.$=$$[$0-2]; 
break;
case 47:
 this.$=[new AstNode("param", {left: $$[$0]})]; 
break;
case 54:
 this.$ = new AstNode("uminus", {left: $$[$0]}); 
break;
case 55:
 this.$ = new AstNode("+", {left: $$[$0-2], right: $$[$0]}); 
break;
case 56:
 this.$ = new AstNode("-", {left: $$[$0-2], right: $$[$0]}); 
break;
case 57:
 this.$ = new AstNode("*", {left: $$[$0-2], right: $$[$0]}); 
break;
case 58:
 this.$ = new AstNode("/", {left: $$[$0-2], right: $$[$0]}); 
break;
case 59:
 this.$ = new AstNode("%", {left: $$[$0-2], right: $$[$0]}); 
break;
case 60:
 this.$ = new AstNode("^", {left: $$[$0-2], right: $$[$0]}); 
break;
case 61:
 this.$ = new AstNode("()", {left: $$[$0-1]}); 
break;
case 62:
 this.$ = new AstNode($$[$0], {left: $$[$0-1]}); 
break;
case 63:
 this.$="++"; 
break;
case 64:
 this.$="--"; 
break;
case 65:
 this.$ = new AstNode(">", {left: $$[$0-2], right: $$[$0]}); 
break;
case 66:
 this.$ = new AstNode("<", {left: $$[$0-2], right: $$[$0]}); 
break;
case 67:
 this.$ = new AstNode("==", {left: $$[$0-2], right: $$[$0]}); 
break;
case 68:
 this.$ = new AstNode("!=", {left: $$[$0-2], right: $$[$0]}); 
break;
case 69:
 this.$ = new AstNode("<=", {left: $$[$0-2], right: $$[$0]}); 
break;
case 70:
 this.$ = new AstNode(">=", {left: $$[$0-2], right: $$[$0]}); 
break;
case 71:
 this.$ = new AstNode("&&", {left: $$[$0-2], right: $$[$0]}); 
break;
case 72:
 this.$ = new AstNode("||", {left: $$[$0-2], right: $$[$0]}); 
break;
case 73:
 this.$ = new AstNode('!', {left: $$[$0]}); 
break;
case 74:
 this.$=new AstNode("func_call", {left: $$[$0-3], params: $$[$0-1]}); 
break;
case 75:
 this.$=new AstNode("func_call", {left: $$[$0-2]}); 
break;
case 76:
 this.$ = 'INT'; 
break;
case 77:
 this.$ = 'CHAR'; 
break;
case 78:
 this.$ = 'BOOL'; 
break;
case 79:
 this.$ = 'DOUBLE'; 
break;
case 80:
 this.$ = 'STRING'; 
break;
case 81:
 this.$ = 'VOID'; 
break;
case 82:
 this.$=$$[$0-1]+1; 
break;
case 83:
 this.$=1; 
break;
case 85:
 this.$=new AstNode('INT_VAL', {value: Number(yytext)}); 
break;
case 86:
 this.$=new AstNode('DOUBLE_VAL', {value: Number(yytext)}); 
break;
case 87:
 this.$=new AstNode('CHAR_VAL', {value: yytext.replaceAll("'","")}); 
break;
case 88:
 this.$=new AstNode('VAL_COM', {value: yytext.replaceAll("\"","")}); 
break;
case 89:
 this.$=new AstNode('BOOL_VAL', {value: yytext=="true"}); 
break;
case 90:
 this.$=new AstNode('ID', {id: yytext}); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:7,10:$V0,11:6,12:8,19:10,25:$V1,41:$V2,76:$V3,77:$V4,78:$V5,79:$V6},{1:[3]},{5:[1,17]},{7:18,8:19,9:7,10:$V0,11:6,12:8,19:10,25:$V1,41:$V2,76:$V3,77:$V4,78:$V5,79:$V6},{5:[2,3],10:$V0,11:20,12:8,19:21,25:$V1,41:$V2,76:$V3,77:$V4,78:$V5,79:$V6},o($V7,[2,5]),o($V8,[2,8]),{10:[1,22]},{10:[1,23]},o($V8,[2,10]),{20:25,27:24,85:$V9},{26:[1,27],85:$Va},{85:[2,76]},{85:[2,77]},{85:[2,78]},{85:[2,79]},{85:[2,80]},{1:[2,1]},{5:[2,2],10:$V0,11:20,12:8,19:21,25:$V1,41:$V2,76:$V3,77:$V4,78:$V5,79:$V6},o($V7,[2,4]),o($V8,[2,7]),{20:28,85:$V9},o($V7,[2,6]),{13:29,14:30,15:31,80:$Vb},{10:[2,35]},{21:$Vc,45:$Vd},o([10,21,23,42,45,48,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],[2,90]),{21:[1,35]},{21:$Vc},o($V8,[2,9],{15:31,14:36,80:$Vb}),o($Ve,[2,12]),{9:41,16:37,17:39,18:40,19:52,20:53,25:$Vf,27:42,28:43,29:44,30:45,31:46,32:[1,47],33:[1,48],34:49,35:50,36:51,37:[1,59],39:[1,60],40:[1,61],41:$V2,44:[1,62],46:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],76:$V3,77:$V4,78:$V5,79:$V6,80:[1,38],85:$V9},o($Vg,[2,83]),{19:66,22:64,23:[1,65],25:$Vf,41:$V2,76:$V3,77:$V4,78:$V5,79:$V6},{20:76,21:$Vh,28:73,38:67,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{23:[1,83]},o($Ve,[2,11]),o($Ve,[2,13]),o($Vg,[2,82]),{10:[1,84]},{10:[1,85]},{10:[2,19]},{10:[2,20]},{10:[2,21]},{10:[2,22]},{10:[2,23]},{10:[2,24]},{10:[2,25]},{10:[2,26]},{10:[2,27]},{10:[2,28]},{10:[2,29]},{20:86,27:24,85:$V9},{21:$Vp,45:$Vd},{21:[1,88]},{21:[1,89]},{21:[1,90]},{21:[1,91]},{10:[2,43],20:76,21:$Vh,28:73,38:92,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{21:[1,93]},{24:[1,94],37:[1,95]},{21:[1,96]},{21:[1,97]},{85:$Va},{23:[1,98],48:[1,99]},{24:[1,100]},{20:101,85:$V9},o([10,42],[2,36],{59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),o($VE,[2,48]),o($VE,[2,49]),o($VE,[2,50]),o($VE,[2,51]),o($VE,[2,52]),o($VE,[2,53]),{20:76,21:$Vh,28:73,38:116,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:117,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},o($VE,[2,84],{43:118,21:$Vp,65:$VF,66:$VG}),{20:76,21:$Vh,28:73,38:121,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},o($VE,[2,85]),o($VE,[2,86]),o($VE,[2,87]),o($VE,[2,88]),o($VE,[2,89]),{24:[1,122]},o($Ve,[2,14]),o($Ve,[2,15]),{45:$Vd},{20:76,21:$Vh,23:[1,124],28:73,38:125,47:$Vi,49:123,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{47:[1,126]},{20:127,85:$V9},{23:[1,128]},{20:76,21:$Vh,28:73,38:129,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{10:[2,42],59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD},{20:76,21:$Vh,28:73,38:130,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{10:[2,31]},{21:[1,131]},{41:[1,132]},{20:76,21:$Vh,28:73,38:133,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{24:[1,134]},{19:135,25:$Vf,41:$V2,76:$V3,77:$V4,78:$V5,79:$V6},{10:[2,17]},o($VH,[2,45]),{20:76,21:$Vh,28:73,38:136,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:137,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:138,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:139,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:140,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:141,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:142,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:143,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:144,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:145,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:146,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:147,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:148,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:76,21:$Vh,28:73,38:149,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},o([10,23,42,48,59,60,61,62,63,64],[2,54],{67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),{23:[1,150],59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD},o($VE,[2,62]),o($VE,[2,63]),o($VE,[2,64]),o($VE,[2,73]),{10:[2,18]},{23:[1,151],48:$VI},o($VE,[2,75]),o($VH,[2,47],{59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),{23:[1,153],48:[1,154]},{23:[1,155]},{10:[2,40]},{23:[1,156],59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD},{23:[1,157],59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD},{20:76,21:$Vh,28:73,38:158,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{20:86,27:159,85:$V9},{23:[1,160],59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD},{10:[2,16]},{20:161,85:$V9},o($VJ,[2,55],{61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),o($VJ,[2,56],{61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),o($VK,[2,57],{64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),o($VK,[2,58],{64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),o($VK,[2,59],{64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),o($VK,[2,60],{64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),o($VL,[2,65],{73:$VC,74:$VD}),o($VL,[2,66],{73:$VC,74:$VD}),o($VL,[2,67],{73:$VC,74:$VD}),o($VL,[2,68],{73:$VC,74:$VD}),o($VL,[2,69],{73:$VC,74:$VD}),o($VL,[2,70],{73:$VC,74:$VD}),o($VE,[2,71]),o($VE,[2,72]),o($VE,[2,61]),o($VE,[2,74]),{20:76,21:$Vh,28:73,38:162,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{10:[2,37]},{20:76,21:$Vh,28:73,38:125,47:$Vi,49:163,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{10:[2,39]},{10:[2,41]},{24:[1,164]},{23:[1,165],59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD},{42:[1,166]},{24:[1,167]},o($VH,[2,44]),o($VH,[2,46],{59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),{23:[1,168],48:$VI},{10:[2,30]},{24:[1,169]},{20:76,21:$Vh,28:73,38:170,47:$Vi,54:68,55:69,56:70,57:71,58:72,59:$Vj,75:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$V9},{10:[2,34]},{10:[2,38]},{10:[2,32]},{42:[1,171],59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD},{43:172,65:$VF,66:$VG},{23:[1,173]},{24:[1,174]},{10:[2,33]}],
defaultActions: {12:[2,76],13:[2,77],14:[2,78],15:[2,79],16:[2,80],17:[2,1],24:[2,35],41:[2,19],42:[2,20],43:[2,21],44:[2,22],45:[2,23],46:[2,24],47:[2,25],48:[2,26],49:[2,27],50:[2,28],51:[2,29],63:[2,81],94:[2,31],100:[2,17],122:[2,18],128:[2,40],134:[2,16],153:[2,37],155:[2,39],156:[2,41],164:[2,30],167:[2,34],168:[2,38],169:[2,32],174:[2,33]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let errors_clr = [];

    function clear_data() {
        errors_clr = [];
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.pushState('ML_COM'); 
break;
case 1: this.pushState('INITIAL'); 
break;
case 2: ; 
break;
case 3: ; 
break;
case 4: this.pushState('L_COM'); 
break;
case 5: this.pushState('INITIAL'); 
break;
case 6: ; 
break;
case 7: /*ignore*/; 
break;
case 8:return 84;
break;
case 9:return 41;
break;
case 10:return 76;
break;
case 11:return 25;
break;
case 12:return 78;
break;
case 13:return 79;
break;
case 14:return 77;
break;
case 15:return 'IMPORT';
break;
case 16:return 'UNCERTAINTY';
break;
case 17:return 37;
break;
case 18:return 39;
break;
case 19:return 40;
break;
case 20:return 44;
break;
case 21:return 46;
break;
case 22:return 53;
break;
case 23:return 33;
break;
case 24:return 32;
break;
case 25:return 26;
break;
case 26:return 51;
break;
case 27:return 50;
break;
case 28:return 52;
break;
case 29:return 65;    // increment
break;
case 30:return 66;    // decrement
break;
case 31:return 60;     // addition
break;
case 32:return 59;     // substraction
break;
case 33:return 61;     // multiplication
break;
case 34:return 62;     // division
break;
case 35:return 63;     // module
break;
case 36:return 64;     // exponent
break;
case 37:return 69;    // equal
break;
case 38:return 70;    // not equal
break;
case 39:return 71;    // lower or equal than
break;
case 40:return 72;    // higher or equal than
break;
case 41:return 68;     // lower than
break;
case 42:return 67;     // higher than
break;
case 43:return '~';     // uncertainty operator
break;
case 44:return 45;     // assignment
break;
case 45:return 73;    // and
break;
case 46:return 74;    // or
break;
case 47:return 75;     // not
break;
case 48:return '|&';    // xor
break;
case 49:return 48;     // comma
break;
case 50:return 24;     // colon
break;
case 51:return 42;     // semi colon
break;
case 52:return 21;     // left parenthesis
break;
case 53:return 23;     // right parenthesis
break;
case 54:return '{';     // left curly bracket
break;
case 55:return '}';     // right curly bracket
break;
case 56:return 82; // decimal: 0.23
break;
case 57:return 81;    // number: 1
break;
case 58:return 83;   // char value: 'a'
break;
case 59:return 47;    // value into comillas: "hi"
break;
case 60:return "CLR_FILE";
break;
case 61:return 85;      // identifier: myId
break;
case 62:return 10;    // new line
break;
case 63:return 80;   // tab
break;
case 64:return 5;   // end of file
break;
case 65:return "INVALID_TKN";  // error, not valid char token
break;
}
},
rules: [/^(?:'")/,/^(?:'")/,/^(?:\n)/,/^(?:.)/,/^(?:!!)/,/^(?:\n)/,/^(?:.)/,/^(?:[ \r]+)/,/^(?:true|false\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:Double\b)/,/^(?:String\b)/,/^(?:Boolean\b)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Mostrar\b)/,/^(?:Retorno\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Principal\b)/,/^(?:DibujarTS\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\|&)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:'(.)')/,/^(?:"[^'"'\n\r]*")/,/^(?:[a-zA-Z][a-zA-Z0-9_]*\.clr\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:\n)/,/^(?:\t)/,/^(?:$)/,/^(?:.)/],
conditions: {"L_COM":{"rules":[0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"ML_COM":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = CLR;
exports.Parser = CLR.Parser;
exports.parse = function () { return CLR.parse.apply(CLR, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}