/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var CLR = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,25],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,6],$Vg=[1,34],$Vh=[5,10,20,25,26,27,33,37,38,39,40,63,64,65,66,67,68,73],$Vi=[10,20,25,26,27,33,37,38,39,40,63,64,65,66,67,68,73],$Vj=[1,44],$Vk=[1,43],$Vl=[1,57],$Vm=[1,63],$Vn=[1,56],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,64],$Vt=[1,78],$Vu=[1,77],$Vv=[1,79],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[10,23,28,35,46,47,48,49,50,51,54,55,56,57,58,59,60,61],$VI=[1,94],$VJ=[1,95],$VK=[1,101],$VL=[23,35],$VM=[10,23,28,35,46,47],$VN=[10,23,28,35,46,47,48,49,50],$VO=[10,23,28,35,46,47,48,49,50,51,54,55,56,57,58,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"mp":3,"func_content":4,"EOF":5,"stmt_tbs":6,"tabs":7,"stmt":8,"line":9,"CR":10,"selection":11,"var_dec":12,"var_assign":13,"func_call":14,"show_stmt":15,"draw_stmt":16,"return_stmt":17,"if_stmt":18,"for_stmt":19,"IF":20,"(":21,"expr":22,")":23,":":24,"ELSE":25,"FOR":26,"INT":27,";":28,"op_sym":29,"var_type":30,"id":31,"=":32,"PRINT":33,"VAL_COM":34,",":35,"parm_list":36,"DRAW_AST":37,"DRAW_TS":38,"DRAW_EXP":39,"RETURN":40,"arythmetic_expr":41,"op_expr":42,"compare_expr":43,"logical_expr":44,"element":45,"-":46,"+":47,"*":48,"/":49,"%":50,"^":51,"++":52,"--":53,">":54,"<":55,"==":56,"!=":57,"<=":58,">=":59,"&&":60,"||":61,"!":62,"CHAR":63,"BOOL":64,"DOUBLE":65,"STRING":66,"VOID":67,"TAB":68,"INT_VAL":69,"DOUBLE_VAL":70,"CHAR_VAL":71,"BOOL_VAL":72,"ID":73,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"CR",20:"IF",21:"(",23:")",24:":",25:"ELSE",26:"FOR",27:"INT",28:";",32:"=",33:"PRINT",34:"VAL_COM",35:",",37:"DRAW_AST",38:"DRAW_TS",39:"DRAW_EXP",40:"RETURN",46:"-",47:"+",48:"*",49:"/",50:"%",51:"^",52:"++",53:"--",54:">",55:"<",56:"==",57:"!=",58:"<=",59:">=",60:"&&",61:"||",62:"!",63:"CHAR",64:"BOOL",65:"DOUBLE",66:"STRING",67:"VOID",68:"TAB",69:"INT_VAL",70:"DOUBLE_VAL",71:"CHAR_VAL",72:"BOOL_VAL",73:"ID"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[8,2],[8,2],[8,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[11,1],[11,1],[18,5],[18,2],[18,6],[19,10],[12,2],[13,3],[15,4],[15,6],[16,4],[16,3],[16,4],[17,2],[17,1],[36,3],[36,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[41,2],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[42,2],[29,1],[29,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[44,3],[44,3],[44,2],[14,4],[14,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[7,2],[7,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log(this.$); 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 3:
 this.$=[$$[$0]]; 
break;
case 4:
 this.$ = new AstNode("statement", {left: $$[$0], tabs: $$[$0-1]}); 
break;
case 5:
 this.$ = new AstNode("statement", {left: $$[$0], tabs: 0}); 
break;
case 6: case 7:
 this.$=$$[$0-1]; 
break;
case 8:
 this.$=new AstNode("no-op"); 
break;
case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16:
 this.$= $$[$0]; 
break;
case 17:
 this.$= new AstNode("if", {left: $$[$0-2]}); 
break;
case 18:
 this.$= new AstNode("else"); 
break;
case 19:
 this.$= new AstNode("elseif", {left: $$[$0-2]}); 
break;
case 20:

            var vd = new AstNode("var_dec", { left: $$[$0-7], right: $$[$0-6]});
            this.$= new AstNode("for", {left: vd, expr: $$[$0-4], inc: $$[$0-2]}); 
        
break;
case 21:
 this.$=new AstNode("var_dec", {left: $$[$0-1], right: $$[$0]}); 
break;
case 22:
 this.$=new AstNode('=', {left: $$[$0-2], right: $$[$0]}); 
break;
case 23:
 this.$=new AstNode('print', {value: $$[$0-1].replaceAll("\"","")}); 
break;
case 24:
 this.$=new AstNode('print', {value: $$[$0-3].replaceAll("\"",""), params: $$[$0-1]}); 
break;
case 25:
 this.$=new AstNode('draw_ast', {value: $$[$0-1]}); 
break;
case 26:
 this.$=new AstNode('draw_ts'); 
break;
case 27:
 this.$=new AstNode('draw_exp', {value: $$[$0-1]}); 
break;
case 28:
 this.$=new AstNode('return', {value: $$[$0]}); 
break;
case 29:
 this.$=new AstNode('return'); 
break;
case 30:
 $$[$0-2].push(new AstNode("param", {left: $$[$0]})); this.$=$$[$0-2]; 
break;
case 31:
 this.$=[new AstNode("param", {left: $$[$0]})]; 
break;
case 32: case 33: case 34: case 35: case 36: case 37: case 68:
 this.$=$$[$0]; 
break;
case 38:
 this.$ = new AstNode("uminus", {left: $$[$0]}); 
break;
case 39:
 this.$ = new AstNode("+", {left: $$[$0-2], right: $$[$0]}); 
break;
case 40:
 this.$ = new AstNode("-", {left: $$[$0-2], right: $$[$0]}); 
break;
case 41:
 this.$ = new AstNode("*", {left: $$[$0-2], right: $$[$0]}); 
break;
case 42:
 this.$ = new AstNode("/", {left: $$[$0-2], right: $$[$0]}); 
break;
case 43:
 this.$ = new AstNode("%", {left: $$[$0-2], right: $$[$0]}); 
break;
case 44:
 this.$ = new AstNode("^", {left: $$[$0-2], right: $$[$0]}); 
break;
case 45:
 this.$ = new AstNode("()", {left: $$[$0-1]}); 
break;
case 46:
 this.$ = new AstNode($$[$0], {left: $$[$0-1]}); 
break;
case 47:
 this.$="++"; 
break;
case 48:
 this.$="--"; 
break;
case 49:
 this.$ = new AstNode(">", {left: $$[$0-2], right: $$[$0]}); 
break;
case 50:
 this.$ = new AstNode("<", {left: $$[$0-2], right: $$[$0]}); 
break;
case 51:
 this.$ = new AstNode("==", {left: $$[$0-2], right: $$[$0]}); 
break;
case 52:
 this.$ = new AstNode("!=", {left: $$[$0-2], right: $$[$0]}); 
break;
case 53:
 this.$ = new AstNode("<=", {left: $$[$0-2], right: $$[$0]}); 
break;
case 54:
 this.$ = new AstNode(">=", {left: $$[$0-2], right: $$[$0]}); 
break;
case 55:
 this.$ = new AstNode("&&", {left: $$[$0-2], right: $$[$0]}); 
break;
case 56:
 this.$ = new AstNode("||", {left: $$[$0-2], right: $$[$0]}); 
break;
case 57:
 this.$ = new AstNode('!', {left: $$[$0]}); 
break;
case 58:
 this.$=new AstNode("func_call", {left: $$[$0-3], params: $$[$0-1]}); 
break;
case 59:
 this.$=new AstNode("func_call", {left: $$[$0-2]}); 
break;
case 60:
 this.$ = 'INT'; 
break;
case 61:
 this.$ = 'CHAR'; 
break;
case 62:
 this.$ = 'BOOL'; 
break;
case 63:
 this.$ = 'DOUBLE'; 
break;
case 64:
 this.$ = 'STRING'; 
break;
case 65:
 this.$ = 'VOID'; 
break;
case 66:
 this.$=$$[$0-1]+1; 
break;
case 67:
 this.$=1; 
break;
case 69:
 this.$=new AstNode('INT_VAL', {value: Number(yytext)}); 
break;
case 70:
 this.$=new AstNode('DOUBLE_VAL', {value: Number(yytext)}); 
break;
case 71:
 this.$=new AstNode('CHAR_VAL', {value: yytext.replaceAll("'","")}); 
break;
case 72:
 this.$=new AstNode('VAL_COM', {value: yytext.replaceAll("\"","")}); 
break;
case 73:
 this.$=new AstNode('BOOL_VAL', {value: yytext=="true"}); 
break;
case 74:
 this.$=new AstNode('ID', {id: yytext}); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:7,10:$V0,11:8,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,25:$V2,26:$V3,27:$V4,30:18,31:19,33:$V5,37:$V6,38:$V7,39:$V8,40:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,73:$Vg},{1:[3]},{5:[1,35],6:36,7:4,8:5,9:7,10:$V0,11:8,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,25:$V2,26:$V3,27:$V4,30:18,31:19,33:$V5,37:$V6,38:$V7,39:$V8,40:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,73:$Vg},o($Vh,[2,3]),{8:37,9:7,10:$V0,11:8,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,25:$V2,26:$V3,27:$V4,30:18,31:19,33:$V5,37:$V6,38:$V7,39:$V8,40:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,68:[1,38],73:$Vg},o($Vh,[2,5]),o($Vi,[2,67]),{10:[1,39]},{10:[1,40]},o($Vh,[2,8]),{10:[2,9]},{10:[2,10]},{10:[2,11]},{10:[2,12]},{10:[2,13]},{10:[2,14]},{10:[2,15]},{10:[2,16]},{13:41,31:42,73:$Vg},{21:$Vj,32:$Vk},{21:[1,45]},{21:[1,46]},{21:[1,47]},{21:[1,48]},{10:[2,29],14:55,21:$Vl,22:49,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{21:[1,65]},{20:[1,67],24:[1,66]},{21:[1,68]},{73:[2,60]},{73:[2,61]},{73:[2,62]},{73:[2,63]},{73:[2,64]},{73:[2,65]},o([10,21,23,28,32,35,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],[2,74]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,4]),o($Vi,[2,66]),o($Vh,[2,6]),o($Vh,[2,7]),{10:[2,21]},{32:$Vk},{14:55,21:$Vl,22:69,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:72,23:[1,71],31:58,34:$Vm,36:70,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{34:[1,73]},{31:74,73:$Vg},{23:[1,75]},{14:55,21:$Vl,22:76,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{10:[2,28],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG},o($VH,[2,32]),o($VH,[2,33]),o($VH,[2,34]),o($VH,[2,35]),o($VH,[2,36]),o($VH,[2,37]),{14:55,21:$Vl,22:91,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:92,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},o($VH,[2,68],{29:93,21:$Vj,52:$VI,53:$VJ}),{14:55,21:$Vl,22:96,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},o($VH,[2,69]),o($VH,[2,70]),o($VH,[2,71]),o($VH,[2,72]),o($VH,[2,73]),{14:55,21:$Vl,22:97,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{10:[2,18]},{21:[1,98]},{27:[1,99]},o([10,28],[2,22],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),{23:[1,100],35:$VK},o($VH,[2,59]),o($VL,[2,31],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),{23:[1,102],35:[1,103]},{23:[1,104]},{10:[2,26]},{23:[1,105],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG},{14:55,21:$Vl,22:106,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:107,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:108,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:109,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:110,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:111,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:112,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:113,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:114,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:115,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:116,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:117,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:118,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{14:55,21:$Vl,22:119,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},o([10,23,28,35,46,47,48,49,50,51],[2,38],{54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),{23:[1,120],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG},o($VH,[2,46]),o($VH,[2,47]),o($VH,[2,48]),o($VH,[2,57]),{23:[1,121],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG},{14:55,21:$Vl,22:122,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{13:123,31:42,73:$Vg},o($VH,[2,58]),{14:55,21:$Vl,22:124,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{10:[2,23]},{14:55,21:$Vl,22:72,31:58,34:$Vm,36:125,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{10:[2,25]},{10:[2,27]},o($VM,[2,39],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),o($VM,[2,40],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),o($VN,[2,41],{51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),o($VN,[2,42],{51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),o($VN,[2,43],{51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),o($VN,[2,44],{51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),o($VO,[2,49],{60:$VF,61:$VG}),o($VO,[2,50],{60:$VF,61:$VG}),o($VO,[2,51],{60:$VF,61:$VG}),o($VO,[2,52],{60:$VF,61:$VG}),o($VO,[2,53],{60:$VF,61:$VG}),o($VO,[2,54],{60:$VF,61:$VG}),o($VH,[2,55]),o($VH,[2,56]),o($VH,[2,45]),{24:[1,126]},{23:[1,127],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG},{28:[1,128]},o($VL,[2,30],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG}),{23:[1,129],35:$VK},{10:[2,17]},{24:[1,130]},{14:55,21:$Vl,22:131,31:58,34:$Vm,41:50,42:51,43:52,44:53,45:54,46:$Vn,62:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vg},{10:[2,24]},{10:[2,19]},{28:[1,132],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG},{29:133,52:$VI,53:$VJ},{23:[1,134]},{24:[1,135]},{10:[2,20]}],
defaultActions: {10:[2,9],11:[2,10],12:[2,11],13:[2,12],14:[2,13],15:[2,14],16:[2,15],17:[2,16],28:[2,60],29:[2,61],30:[2,62],31:[2,63],32:[2,64],33:[2,65],35:[2,1],41:[2,21],66:[2,18],75:[2,26],102:[2,23],104:[2,25],105:[2,27],126:[2,17],129:[2,24],130:[2,19],135:[2,20]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.pushState('ML_COM'); 
break;
case 1: this.pushState('INITIAL'); 
break;
case 2: ; 
break;
case 3: ; 
break;
case 4: this.pushState('L_COM'); 
break;
case 5: this.pushState('INITIAL'); 
break;
case 6: ; 
break;
case 7: /*ignore*/; 
break;
case 8:return 72;
break;
case 9:return 27;
break;
case 10:return 63;
break;
case 11:return 67;
break;
case 12:return 65;
break;
case 13:return 66;
break;
case 14:return 64;
break;
case 15:return 'IMPORT';
break;
case 16:return 'UNCERTAINTY';
break;
case 17:return 20;
break;
case 18:return 25;
break;
case 19:return 26;
break;
case 20:return 33;
break;
case 21:return 40;
break;
case 22:return 'BREAK';
break;
case 23:return 'CONTINUE';
break;
case 24:return 38;
break;
case 25:return 37;
break;
case 26:return 39;
break;
case 27:return 52;    // increment
break;
case 28:return 53;    // decrement
break;
case 29:return 47;     // addition
break;
case 30:return 46;     // substraction
break;
case 31:return 48;     // multiplication
break;
case 32:return 49;     // division
break;
case 33:return 50;     // module
break;
case 34:return 51;     // exponent
break;
case 35:return 56;    // equal
break;
case 36:return 57;    // not equal
break;
case 37:return 58;    // lower or equal than
break;
case 38:return 59;    // higher or equal than
break;
case 39:return 55;     // lower than
break;
case 40:return 54;     // higher than
break;
case 41:return '~';     // uncertainty operator
break;
case 42:return 32;     // assignment
break;
case 43:return 60;    // and
break;
case 44:return 61;    // or
break;
case 45:return 62;     // not
break;
case 46:return '|&';    // xor
break;
case 47:return 35;     // comma
break;
case 48:return 24;     // colon
break;
case 49:return 28;     // semi colon
break;
case 50:return 21;     // left parenthesis
break;
case 51:return 23;     // right parenthesis
break;
case 52:return '{';     // left curly bracket
break;
case 53:return '}';     // right curly bracket
break;
case 54:return 70; // decimal: 0.23
break;
case 55:return 69;    // number: 1
break;
case 56:return 71;   // char value: 'a'
break;
case 57:return 34;    // value into comillas: "hi"
break;
case 58:return "CLR_FILE";
break;
case 59:return 73;      // identifier: myId
break;
case 60:return 10;    // new line
break;
case 61:return 68;   // tab
break;
case 62:return 5;   // end of file
break;
case 63:return "INVALID_TKN";  // error, not valid char token
break;
}
},
rules: [/^(?:'")/,/^(?:'")/,/^(?:\n)/,/^(?:.)/,/^(?:!!)/,/^(?:\n)/,/^(?:.)/,/^(?:[ \r]+)/,/^(?:true|false\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:Double\b)/,/^(?:String\b)/,/^(?:Boolean\b)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mostrar\b)/,/^(?:Retorno\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:DibujarTS\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\|&)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:'(.)')/,/^(?:"[^'"'\n\r]*")/,/^(?:[a-zA-Z][a-zA-Z0-9_]*\.clr\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:\n)/,/^(?:\t)/,/^(?:$)/,/^(?:.)/],
conditions: {"L_COM":{"rules":[0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true},"ML_COM":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = CLR;
exports.Parser = CLR.Parser;
exports.parse = function () { return CLR.parse.apply(CLR, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}