/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var CRL = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,7],$V2=[1,13],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,14],$V9=[2,5,10,23,39,75,76,77,78,79],$Va=[1,51],$Vb=[1,52],$Vc=[2,82],$Vd=[23,30,31,35,37,38,39,42,46,49,50,51,52,75,76,77,78,79,84],$Ve=[2,37],$Vf=[1,61],$Vg=[1,60],$Vh=[1,74],$Vi=[1,80],$Vj=[1,73],$Vk=[1,76],$Vl=[1,77],$Vm=[1,78],$Vn=[1,79],$Vo=[1,81],$Vp=[10,44],$Vq=[10,40,44],$Vr=[1,99],$Vs=[1,98],$Vt=[1,100],$Vu=[1,101],$Vv=[1,102],$Vw=[1,103],$Vx=[1,104],$Vy=[1,105],$Vz=[1,106],$VA=[1,107],$VB=[1,108],$VC=[1,109],$VD=[1,110],$VE=[1,111],$VF=[10,21,40,44,58,59,60,61,62,63,66,67,68,69,70,71,72,73],$VG=[1,115],$VH=[1,116],$VI=[1,128],$VJ=[21,44],$VK=[10,21,40,44,58,59],$VL=[10,21,40,44,58,59,60,61,62],$VM=[10,21,40,44,58,59,60,61,62,63,66,67,68,69,70,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"mp":3,"body":4,"EOF":5,"body_sec":6,"global_var":7,"func_mdl":8,"stmt_tbs":9,"CR":10,"var_dec":11,"func_def":12,"tabs":13,"stmt":14,"line":15,"selection":16,"var_type":17,"id":18,"(":19,"param_request":20,")":21,":":22,"VOID":23,"MAIN":24,"var_assign":25,"func_call":26,"show_stmt":27,"draw_stmt":28,"return_stmt":29,"CONTINUE":30,"BREAK":31,"if_stmt":32,"for_stmt":33,"while_stmt":34,"IF":35,"expr":36,"ELSE":37,"FOR":38,"INT":39,";":40,"op_sym":41,"WHILE":42,"var_assign_list":43,",":44,"=":45,"PRINT":46,"VAL_COM":47,"parm_list":48,"DRAW_AST":49,"DRAW_TS":50,"DRAW_EXP":51,"RETURN":52,"arythmetic_expr":53,"op_expr":54,"compare_expr":55,"logical_expr":56,"element":57,"-":58,"+":59,"*":60,"/":61,"%":62,"^":63,"++":64,"--":65,">":66,"<":67,"==":68,"!=":69,"<=":70,">=":71,"&&":72,"||":73,"!":74,"CHAR":75,"BOOL":76,"DOUBLE":77,"STRING":78,"TAB":79,"INT_VAL":80,"DOUBLE_VAL":81,"CHAR_VAL":82,"BOOL_VAL":83,"ID":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"CR",19:"(",21:")",22:":",23:"VOID",24:"MAIN",30:"CONTINUE",31:"BREAK",35:"IF",37:"ELSE",38:"FOR",39:"INT",40:";",42:"WHILE",44:",",45:"=",46:"PRINT",47:"VAL_COM",49:"DRAW_AST",50:"DRAW_TS",51:"DRAW_EXP",52:"RETURN",58:"-",59:"+",60:"*",61:"/",62:"%",63:"^",64:"++",65:"--",66:">",67:"<",68:"==",69:"!=",70:"<=",71:">=",72:"&&",73:"||",74:"!",75:"CHAR",76:"BOOL",77:"DOUBLE",78:"STRING",79:"TAB",80:"INT_VAL",81:"DOUBLE_VAL",82:"CHAR_VAL",83:"BOOL_VAL",84:"ID"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,2],[8,2],[9,2],[14,2],[14,2],[12,6],[12,5],[12,5],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[16,1],[16,1],[16,1],[32,5],[32,2],[32,6],[33,10],[34,5],[11,2],[43,3],[43,1],[25,3],[25,1],[27,4],[27,6],[28,4],[28,3],[28,4],[29,2],[29,1],[20,4],[20,2],[48,3],[48,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[53,2],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[54,2],[41,1],[41,1],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[56,3],[56,3],[56,2],[26,4],[26,3],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[13,2],[13,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        var backup = crl_utils;
        crl_utils = new CRLUtils();
        return backup;
    
break;
case 4: case 5: case 6:
 crl_utils.push_pipe($$[$0], this._$.first_line); 
break;
case 8:
 crl_utils.add_error(this._$.first_line, this._$.first_column, "Sintactico", yytext); 
break;
case 9:
  $$[$0-1].label=EPVN.global_var_dec; this.$=$$[$0-1]; 
break;
case 10:
 this.$ =$$[$0-1]; 
break;
case 11:
 this.$ = new AstNode($$[$0][1], [$$[$0][0]], $$[$0-1]);
break;
case 12:
 this.$=[$$[$0-1], EPVN.stmt_line]; 
break;
case 13:
 this.$=[$$[$0-1], EPVN.stmt_selection]; 
break;
case 14:
 this.$=new AstNode(EPVN.func, [$$[$0-5], $$[$0-4], $$[$0-2]]); 
break;
case 15:
 this.$=new AstNode(EPVN.func, [$$[$0-4], $$[$0-3], []]); 
break;
case 16:
 this.$=new AstNode(EPVN.func_main); 
break;
case 17: case 18: case 19: case 20: case 21: case 22: case 25: case 26: case 27:
 this.$= $$[$0]; 
break;
case 23:
 this.$= new AstNode(EPVN.continue); 
break;
case 24:
 this.$= new AstNode(EPVN.break); 
break;
case 28:
 this.$= new AstNode(EPVN.if, [$$[$0-2]]); 
break;
case 29:
 this.$= new AstNode(EPVN.else); 
break;
case 30:
 this.$= new AstNode(EPVN.else_if, [$$[$0-2]]); 
break;
case 31:

            var vd = new AstNode(EPVN.var_dec, [$$[$0-7], $$[$0-6]]);
            this.$= new AstNode(EPVN.for, [vd, $$[$0-4], $$[$0-2]]); 
        
break;
case 32:
 this.$= new AstNode(EPVN.while, [$$[$0-2]]); 
break;
case 33:
 this.$=new AstNode(EPVN.var_dec, [$$[$0-1], $$[$0]]); 
break;
case 34:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 35:
 this.$ = [$$[$0]]; 
break;
case 36:
 this.$=new AstNode(EPVN.EQ, [$$[$0-2], $$[$0]]); 
break;
case 37: case 49: case 50: case 51: case 52: case 53: case 54: case 85:
 this.$=$$[$0]; 
break;
case 38:
 this.$=new AstNode(EPVN.print_stmt, [$$[$0-1].replaceAll("\"",""), null]); 
break;
case 39:
 this.$=new AstNode(EPVN.print_stmt, [$$[$0-3].replaceAll("\"",""), $$[$0-1]]); 
break;
case 40:
 this.$=new AstNode(EPVN.draw_ast, [$$[$0-1]]); 
break;
case 41:
 this.$=new AstNode(EPVN.draw_ts); 
break;
case 42:
 this.$=new AstNode(EPVN.draw_exp, [$$[$0-1]]); 
break;
case 43:
 this.$=new AstNode(EPVN.return, [$$[$0]]); 
break;
case 44:
 this.$=new AstNode(EPVN.return); 
break;
case 45:
 $$[$0-3].push(new AstNode(EPVN.var_dec, [$$[$0-1], $$[$0]])); this.$=$$[$0-3]; 
break;
case 46:
 this.$ = [new AstNode(EPVN.var_dec, [$$[$0-1], $$[$0]])]; 
break;
case 47:
 $$[$0-2].push(new AstNode(EPVN.param, [$$[$0]])); this.$=$$[$0-2]; 
break;
case 48:
 this.$=[new AstNode(EPVN.param, [$$[$0]])]; 
break;
case 55:
 this.$ = new AstNode(EPVN.UMINUS, [$$[$0]]); 
break;
case 56:
 this.$ = new AstNode(EPVN.ADD, [$$[$0-2], $$[$0]]); 
break;
case 57:
 this.$ = new AstNode(EPVN.SUB, [$$[$0-2], $$[$0]]); 
break;
case 58:
 this.$ = new AstNode(EPVN.MULT, [$$[$0-2], $$[$0]]); 
break;
case 59:
 this.$ = new AstNode(EPVN.DIV, [$$[$0-2], $$[$0]]); 
break;
case 60:
 this.$ = new AstNode(EPVN.MOD, [$$[$0-2], $$[$0]]); 
break;
case 61:
 this.$ = new AstNode(EPVN.POUND, [$$[$0-2], $$[$0]]); 
break;
case 62:
 this.$ = new AstNode(EPVN.PARENTHESIS, [$$[$0-1]]); 
break;
case 63:
 this.$ = new AstNode($$[$0], [$$[$0-1]]); 
break;
case 64:
 this.$=EPVN.PP; 
break;
case 65:
 this.$=EPVN.LL; 
break;
case 66:
 this.$ = new AstNode(EPVN.GT, [$$[$0-2], $$[$0]]); 
break;
case 67:
 this.$ = new AstNode(EPVN.LT, [$$[$0-2], $$[$0]]); 
break;
case 68:
 this.$ = new AstNode(EPVN.EQ, [$$[$0-2], $$[$0]]); 
break;
case 69:
 this.$ = new AstNode(EPVN.NE, [$$[$0-2], $$[$0]]); 
break;
case 70:
 this.$ = new AstNode(EPVN.LET, [$$[$0-2], $$[$0]]); 
break;
case 71:
 this.$ = new AstNode(EPVN.HET, [$$[$0-2], $$[$0]]); 
break;
case 72:
 this.$ = new AstNode(EPVN.and, [$$[$0-2], $$[$0]]); 
break;
case 73:
 this.$ = new AstNode(EPVN.or, [$$[$0-2], $$[$0]]); 
break;
case 74:
 this.$ = new AstNode(EPVN.not, [$$[$0]]); 
break;
case 75:
 this.$=new AstNode(EPVN.func_call, [$$[$0-3], $$[$0-1]]); 
break;
case 76:
 this.$=new AstNode(EPVN.func_call, [$$[$0-2], null]); 
break;
case 77:
 this.$ = EPVN.int; 
break;
case 78:
 this.$ = EPVN.char; 
break;
case 79:
 this.$ = EPVN.bool; 
break;
case 80:
 this.$ = EPVN.double; 
break;
case 81:
 this.$ = EPVN.string; 
break;
case 82:
 this.$ = EPVN.void; 
break;
case 83:
 this.$=$$[$0-1]+1; 
break;
case 84:
 this.$=1; 
break;
case 86:
 this.$=new AstNode(EPVN.int_val, [$$[$0]]); 
break;
case 87:
 this.$=new AstNode(EPVN.double_val, [Number(yytext)]); 
break;
case 88:
 this.$=new AstNode(EPVN.char_val, [yytext.replaceAll("'","")]); 
break;
case 89:
 this.$=new AstNode(EPVN.val_com, [yytext.replaceAll("\"","")]); 
break;
case 90:
 this.$=new AstNode(EPVN.bool_val, [yytext=="true"]); 
break;
case 91:
 this.$=new AstNode(EPVN.id, [$$[$0]]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:$V1,11:9,12:10,13:11,17:12,23:$V2,39:$V3,75:$V4,76:$V5,77:$V6,78:$V7,79:$V8},{1:[3]},{2:$V0,5:[1,20],6:21,7:4,8:5,9:6,10:$V1,11:9,12:10,13:11,17:12,23:$V2,39:$V3,75:$V4,76:$V5,77:$V6,78:$V7,79:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),{10:[1,22]},{10:[1,23]},{10:[1,24]},{11:29,14:25,15:27,16:28,17:40,18:41,23:$Va,25:30,26:31,27:32,28:33,29:34,30:[1,35],31:[1,36],32:37,33:38,34:39,35:[1,47],37:[1,48],38:[1,49],39:$V3,42:[1,50],46:[1,42],49:[1,43],50:[1,44],51:[1,45],52:[1,46],75:$V4,76:$V5,77:$V6,78:$V7,79:[1,26],84:$Vb},{18:54,25:55,43:53,84:$Vb},{24:[1,56],84:$Vc},o($Vd,[2,84]),{84:[2,77]},{84:[2,78]},{84:[2,79]},{84:[2,80]},{84:[2,81]},{1:[2,1]},o($V9,[2,2]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),o($Vd,[2,83]),{10:[1,57]},{10:[1,58]},{10:[2,17]},{10:[2,18]},{10:[2,19]},{10:[2,20]},{10:[2,21]},{10:[2,22]},{10:[2,23]},{10:[2,24]},{10:[2,25]},{10:[2,26]},{10:[2,27]},{18:59,25:55,43:53,84:$Vb},{10:$Ve,19:$Vf,45:$Vg},{19:[1,62]},{19:[1,63]},{19:[1,64]},{19:[1,65]},{10:[2,44],18:75,19:$Vh,26:72,36:66,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{19:[1,82]},{22:[1,83],35:[1,84]},{19:[1,85]},{19:[1,86]},{84:$Vc},o([10,19,21,40,44,45,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],[2,91]),{10:[2,33],44:[1,87]},o($Vp,$Ve,{19:[1,88],45:$Vg}),o($Vp,[2,35]),{19:[1,89]},o($V9,[2,12]),o($V9,[2,13]),o($Vq,$Ve,{45:$Vg}),{18:75,19:$Vh,26:72,36:90,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,21:[1,92],26:72,36:93,47:$Vi,48:91,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{47:[1,94]},{18:95,84:$Vb},{21:[1,96]},{18:75,19:$Vh,26:72,36:97,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{10:[2,43],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),o($VF,[2,52]),o($VF,[2,53]),o($VF,[2,54]),{18:75,19:$Vh,26:72,36:112,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:113,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},o($VF,[2,85],{41:114,19:$Vf,64:$VG,65:$VH}),{18:75,19:$Vh,26:72,36:117,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},o($VF,[2,86]),o($VF,[2,87]),o($VF,[2,88]),o($VF,[2,89]),o($VF,[2,90]),{18:75,19:$Vh,26:72,36:118,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{10:[2,29]},{19:[1,119]},{39:[1,120]},{18:75,19:$Vh,26:72,36:121,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:59,25:122,84:$Vb},{17:125,20:123,21:[1,124],23:$Va,39:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{21:[1,126]},o($Vq,[2,36],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),{21:[1,127],44:$VI},o($VF,[2,76]),o($VJ,[2,48],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),{21:[1,129],44:[1,130]},{21:[1,131]},{10:[2,41]},{21:[1,132],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{18:75,19:$Vh,26:72,36:133,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:134,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:135,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:136,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:137,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:138,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:139,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:140,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:141,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:142,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:143,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:144,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:145,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:75,19:$Vh,26:72,36:146,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},o([10,21,40,44,58,59,60,61,62,63],[2,55],{66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),{21:[1,147],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},o($VF,[2,63]),o($VF,[2,64]),o($VF,[2,65]),o($VF,[2,74]),{21:[1,148],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{18:75,19:$Vh,26:72,36:149,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{18:59,25:150,84:$Vb},{21:[1,151],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},o($Vp,[2,34]),{21:[1,152],44:[1,153]},{22:[1,154]},{18:155,84:$Vb},{22:[1,156]},o($VF,[2,75]),{18:75,19:$Vh,26:72,36:157,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{10:[2,38]},{18:75,19:$Vh,26:72,36:93,47:$Vi,48:158,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{10:[2,40]},{10:[2,42]},o($VK,[2,56],{60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($VK,[2,57],{60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($VL,[2,58],{63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($VL,[2,59],{63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($VL,[2,60],{63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($VL,[2,61],{63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($VM,[2,66],{72:$VD,73:$VE}),o($VM,[2,67],{72:$VD,73:$VE}),o($VM,[2,68],{72:$VD,73:$VE}),o($VM,[2,69],{72:$VD,73:$VE}),o($VM,[2,70],{72:$VD,73:$VE}),o($VM,[2,71],{72:$VD,73:$VE}),o($VF,[2,72]),o($VF,[2,73]),o($VF,[2,62]),{22:[1,159]},{21:[1,160],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{40:[1,161]},{22:[1,162]},{22:[1,163]},{17:164,23:$Va,39:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{10:[2,15]},o($VJ,[2,46]),{10:[2,16]},o($VJ,[2,47],{58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),{21:[1,165],44:$VI},{10:[2,28]},{22:[1,166]},{18:75,19:$Vh,26:72,36:167,47:$Vi,53:67,54:68,55:69,56:70,57:71,58:$Vj,74:$Vk,80:$Vl,81:$Vm,82:$Vn,83:$Vo,84:$Vb},{10:[2,32]},{10:[2,14]},{18:168,84:$Vb},{10:[2,39]},{10:[2,30]},{40:[1,169],58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},o($VJ,[2,45]),{41:170,64:$VG,65:$VH},{21:[1,171]},{22:[1,172]},{10:[2,31]}],
defaultActions: {15:[2,77],16:[2,78],17:[2,79],18:[2,80],19:[2,81],20:[2,1],29:[2,17],30:[2,18],31:[2,19],32:[2,20],33:[2,21],34:[2,22],35:[2,23],36:[2,24],37:[2,25],38:[2,26],39:[2,27],51:[2,82],83:[2,29],96:[2,41],129:[2,38],131:[2,40],132:[2,42],154:[2,15],156:[2,16],159:[2,28],162:[2,32],163:[2,14],165:[2,39],166:[2,30],172:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { CRLUtils } = require('src/app/models/CRL/crl-utils.model.ts');
    const { AstNode } = require('src/app/models/tree/ast-node.model.ts');
    const { EPVN } = require('src/app/models/tree/ast-node-expected.model.ts')
    let crl_utils = new CRLUtils();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.pushState('L_COM'); 
break;
case 1: this.pushState('INITIAL'); 
break;
case 2: ; 
break;
case 3: this.pushState('ML_COM'); 
break;
case 4: this.pushState('INITIAL'); 
break;
case 5: ; 
break;
case 6: ; 
break;
case 7: /*ignore*/; 
break;
case 8:return 83;
break;
case 9:return 39;
break;
case 10:return 75;
break;
case 11:return 23;
break;
case 12:return 77;
break;
case 13:return 78;
break;
case 14:return 76;
break;
case 15:return 'IMPORT';
break;
case 16:return 'UNCERTAINTY';
break;
case 17:return 35;
break;
case 18:return 37;
break;
case 19:return 38;
break;
case 20:return 42;
break;
case 21:return 46;
break;
case 22:return 52;
break;
case 23:return 31;
break;
case 24:return 30;
break;
case 25:return 24;
break;
case 26:return 50;
break;
case 27:return 49;
break;
case 28:return 51;
break;
case 29:return 64;    // increment
break;
case 30:return 65;    // decrement
break;
case 31:return 59;     // addition
break;
case 32:return 58;     // substraction
break;
case 33:return 60;     // multiplication
break;
case 34:return 61;     // division
break;
case 35:return 62;     // module
break;
case 36:return 63;     // exponent
break;
case 37:return 68;    // equal
break;
case 38:return 69;    // not equal
break;
case 39:return 70;    // lower or equal than
break;
case 40:return 71;    // higher or equal than
break;
case 41:return 67;     // lower than
break;
case 42:return 66;     // higher than
break;
case 43:return '~';     // uncertainty operator
break;
case 44:return 45;     // assignment
break;
case 45:return 72;    // and
break;
case 46:return 73;    // or
break;
case 47:return 74;     // not
break;
case 48:return '|&';    // xor
break;
case 49:return 44;     // comma
break;
case 50:return 22;     // colon
break;
case 51:return 40;     // semi colon
break;
case 52:return 19;     // left parenthesis
break;
case 53:return 21;     // right parenthesis
break;
case 54:return '{';     // left curly bracket
break;
case 55:return '}';     // right curly bracket
break;
case 56:return 81; // decimal: 0.23
break;
case 57:return 80;    // number: 1
break;
case 58:return 82;   // char value: 'a'
break;
case 59:return 47;    // value into comillas: "hi"
break;
case 60:return "CRL_FILE";
break;
case 61:return 84;      // identifier: myId
break;
case 62:return 10;    // new line
break;
case 63:return 79;   // tab
break;
case 64:return 5;   // end of file
break;
case 65:crl_utils.add_error(yy_.yylineno + 1, yy_.yylloc.first_column + 1, "Lexico", yy_.yytext); return "INVALID_TKN";
break;
}
},
rules: [/^(?:!!)/,/^(?:\n)/,/^(?:.)/,/^(?:'")/,/^(?:'")/,/^(?:\n)/,/^(?:.)/,/^(?:[ \r]+)/,/^(?:true|false\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:Double\b)/,/^(?:String\b)/,/^(?:Boolean\b)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Mostrar\b)/,/^(?:Retorno\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Principal\b)/,/^(?:DibujarTS\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\|&)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:'(.)')/,/^(?:"[^'"'\n\r]*")/,/^(?:[a-zA-Z][a-zA-Z0-9_]*\.crl\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:\n)/,/^(?:\t)/,/^(?:$)/,/^(?:.)/],
conditions: {"L_COM":{"rules":[0,1,2,3,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"ML_COM":{"rules":[4,5,6],"inclusive":false},"INITIAL":{"rules":[0,3,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = CRL;
exports.Parser = CRL.Parser;
exports.parse = function () { return CRL.parse.apply(CRL, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}